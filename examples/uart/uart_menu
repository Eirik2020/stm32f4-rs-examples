# Sending and receiving messages to your MCU
You might be interested in sending UART messages to your MCU, in this chapter we will cover this and parsing them.
We will assume that you have familiarized yourself with the previous example "Sending messages from the MCU".


We include `core::fmt` and `heapless::String`. `core::fmt` is used to write formatted text over UART. While `heapless::String` gives us data structures without dynamic memory allocation. 
```rust
use core::fmt::Write;
use heapless::String; // fixed-capacity string
```

The major difference in this case, is that we want to read AND write messages this time. To do this, we need to split our serial object in two:
```rust
let (mut tx, mut rx) = serial.split();
```
This way, we can handle sending and receiving messages differently. In addition, we need to store our messages in order to parse them:
```rust
let mut buffer: String<64> = String::new();
```

Now here is the juicy part, we want to actually read, store and parse the UART message:
```rust
loop { // Wait for a full line of input
            if let Ok(byte) = rx.read() { // If a UART byte is received:
                let c = byte as char;   // Convert byte to char.
                if c == '\r' || c == '\n' {   // If it is a carrige return or line break, end loop.
                    break;
                } else {
                    buffer.push(c).ok();     // Else, add char to buffer.
                }
            }
        }
```

A loop that continuously reads characters from the UART receiver (rx).If it reads a byte from the UART input, it returns nb::Result, so Ok(byte) means a new byte is available.
```rust
if let Ok(byte) = rx.read() {
            ...
}
```

If a byte is read, its converted from a u8 to a char.
```rust
let c = byte as char;
```

If the character is a newline (\n) or carriage return (\r), we assume the user has finished typing, so we break the loop.
```rust
if c == '\r' || c == '\n' {
            break;
        }
```

Else, we store it to the buffer, for later parsing. 
```rust
else {
        buffer.push(c).ok();
    }
```


Next, we want to greet the user after they have connected, once, so we add a check if this is the first loop.
```rust
        if first_loop {
            writeln!(tx, "\r\nWelcome to the STM32 UART Menu! \r\n").ok();
            first_loop = false;
            }
```

Now we need to create our menu, to keep it clean, I've kept it as a separate function.
```rust
fn print_menu<W: Write>(tx: &mut W) {
    writeln!(tx, "== Menu == \r\n").ok();
    writeln!(tx, "1. Turn LED ON \r\n").ok();
    writeln!(tx, "2. Turn LED OFF \r\n").ok();
    writeln!(tx, "3. Print STATUS \r\n").ok();
    writeln!(tx, "4. Reset \r\n").ok();
}
```

The menu takes in our transmitter object `tx`, and then prints out our menu. Nice and simple. Next we want to respond to what the user actually sent:
```rust
print_menu(&mut tx);
match buffer.trim() {
    "1" => writeln!(tx, "You selected option 1: LED ON"),
    "2" => writeln!(tx, "You selected option 2: LED OFF"),
    "3" => writeln!(tx, "You selected option 3: STATUS OK"),
    "4" => writeln!(tx, "You selected option 4: Resetting..."),
    _   => writeln!(tx, "ERROR! Invalid command: {}", buffer),
}.ok();
```
Here we first display our menu, then we use `match`, to match the user's response with our look up table, and write back. 

Finally, we clear the buffer, and give ourself some extra headroom for the next response:
```rust
buffer.clear();

writeln!(tx, "\r\n\n\n").ok();
```

## Complete Example
Here is a complete code example, it is the default example, and can be run with:
```sh
$ cargo embed --example uart_cli
```

To interact, connect with Putty, and press enter once to get a response. 

```rust
// Compiler directives
#![no_std]
#![no_main]

// Libraries
// Generic
use cortex_m_rt::entry;
use defmt_rtt as _;
use panic_probe as _;

// UART Specific
use core::fmt::Write; // Used for formatted text over UART. 
use heapless::String; // fixed-capacity string
use stm32f4xx_hal::{
    pac,
    prelude::*,
    serial::{
        config::Config, // Struct for storing the UART configuration.
        Serial // Struct used to initialize UART and pin configuration. 
    },
};



#[entry]
fn main() -> ! {
    // Take ownership of peripherals and configure clocks
    let dp = pac::Peripherals::take().unwrap();
    let rcc = dp.RCC.constrain();
    let clocks = rcc.cfgr.freeze();

    // Split out GPIO group A and configure rx and tx pins.
    let gpioa = dp.GPIOA.split();
    let tx = gpioa.pa2.into_alternate();
    let rx = gpioa.pa3.into_alternate();

    // Configure UART communication for 115200 baud rate on USART2. 
    let serial_config = Config::default().baudrate(115_200.bps());
    let mut serial = Serial::new(dp.USART2, (tx, rx), serial_config, &clocks).unwrap();

    // Split serial object into receiver and transmitter.
    let (mut tx, mut rx) = serial.split();

    // Message buffer
    let mut buffer: String<64> = String::new();

    // First loop check
    let mut first_loop: bool = true;



    loop {
        loop { // Wait for a full line of input
            if let Ok(byte) = rx.read() { // If a UART byte is received:
                let c = byte as char;   // Convert byte to char.
                if c == '\r' || c == '\n' {   // If it is a carrige return or line break, end loop.
                    break;
                } else {
                    buffer.push(c).ok();     // Else, add char to buffer.
                }
            }
        }

        // Run CLI application
        // Greet user on first loop.
        if first_loop {
            writeln!(tx, "\r\nWelcome to the STM32 UART Menu! \r\n").ok();
            first_loop = false;
            }

        // Display Menu
        print_menu(&mut tx); // Print menu

        // Respond to user
        match buffer.trim() {
            "1" => writeln!(tx, "You selected option 1: LED ON"),
            "2" => writeln!(tx, "You selected option 2: LED OFF"),
            "3" => writeln!(tx, "You selected option 3: STATUS OK"),
            "4" => writeln!(tx, "You selected option 4: Resetting..."),
            _   => writeln!(tx, "ERROR! Invalid command: {}", buffer),
        }.ok();

        // Clear buffer
        buffer.clear();

        // Clear space for next response
        writeln!(tx, "\r\n\n\n").ok();
    }
}


// Functions
fn print_menu<W: Write>(tx: &mut W) {
    writeln!(tx, "== Menu == \r\n").ok();
    writeln!(tx, "1. Turn LED ON \r\n").ok();
    writeln!(tx, "2. Turn LED OFF \r\n").ok();
    writeln!(tx, "3. Print STATUS \r\n").ok();
    writeln!(tx, "4. Reset \r\n").ok();
}
```